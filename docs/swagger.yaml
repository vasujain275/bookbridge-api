definitions:
  handler.CreateBookRequest:
    properties:
      isbn:
        type: string
    required:
    - isbn
    type: object
  handler.CreateUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - role
    - username
    type: object
  handler.UpdateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  util.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      success:
        type: boolean
      timestamp:
        type: string
    type: object
info:
  contact: {}
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Get a list of books with pagination.
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Books retrieved successfully
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/util.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.Response'
      summary: List books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book by fetching details from OpenLibrary using ISBN
      parameters:
      - description: Book ISBN
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/handler.CreateBookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Book created successfully
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/util.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.Response'
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    get:
      consumes:
      - application/json
      description: Get a book by its ID.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Book found
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/util.Response'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/util.Response'
      summary: Get book by ID
      tags:
      - books
  /books/isbn/{isbn}:
    get:
      consumes:
      - application/json
      description: Get a book by its ISBN.
      parameters:
      - description: Book ISBN
        in: path
        name: isbn
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Book found
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Invalid ISBN supplied
          schema:
            $ref: '#/definitions/util.Response'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/util.Response'
      summary: Get book by ISBN
      tags:
      - books
  /users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users.
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            $ref: '#/definitions/util.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.Response'
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user.
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/util.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.Response'
      summary: Create user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by its ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/util.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.Response'
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user by its ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/util.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/util.Response'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/util.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/util.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/util.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/util.Response'
      summary: Update user
      tags:
      - users
swagger: "2.0"
