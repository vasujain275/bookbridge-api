// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: author.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addBookAuthor = `-- name: AddBookAuthor :exec
INSERT INTO book_authors (
  book_id, author_id
) VALUES (
  $1, $2
)
`

type AddBookAuthorParams struct {
	BookID   uuid.UUID `json:"book_id"`
	AuthorID uuid.UUID `json:"author_id"`
}

func (q *Queries) AddBookAuthor(ctx context.Context, arg AddBookAuthorParams) error {
	_, err := q.db.Exec(ctx, addBookAuthor, arg.BookID, arg.AuthorID)
	return err
}

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateAuthor(ctx context.Context, name string) (Author, error) {
	row := q.db.QueryRow(ctx, createAuthor, name)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, created_at, updated_at FROM authors
WHERE id = $1
`

func (q *Queries) GetAuthor(ctx context.Context, id uuid.UUID) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthor, id)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthorByName = `-- name: GetAuthorByName :one
SELECT id, name, created_at, updated_at FROM authors
WHERE name = $1
`

func (q *Queries) GetAuthorByName(ctx context.Context, name string) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthorByName, name)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, created_at, updated_at FROM authors
ORDER BY name
LIMIT $1 OFFSET $2
`

type ListAuthorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAuthors(ctx context.Context, arg ListAuthorsParams) ([]Author, error) {
	rows, err := q.db.Query(ctx, listAuthors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuthorsByBookID = `-- name: ListAuthorsByBookID :many
SELECT a.id, a.name, a.created_at, a.updated_at FROM authors a
JOIN book_authors ba ON a.id = ba.author_id
WHERE ba.book_id = $1
ORDER BY a.name
`

func (q *Queries) ListAuthorsByBookID(ctx context.Context, bookID uuid.UUID) ([]Author, error) {
	rows, err := q.db.Query(ctx, listAuthorsByBookID, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllBookAuthors = `-- name: RemoveAllBookAuthors :exec
DELETE FROM book_authors
WHERE book_id = $1
`

func (q *Queries) RemoveAllBookAuthors(ctx context.Context, bookID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeAllBookAuthors, bookID)
	return err
}

const removeBookAuthor = `-- name: RemoveBookAuthor :exec
DELETE FROM book_authors
WHERE book_id = $1 AND author_id = $2
`

type RemoveBookAuthorParams struct {
	BookID   uuid.UUID `json:"book_id"`
	AuthorID uuid.UUID `json:"author_id"`
}

func (q *Queries) RemoveBookAuthor(ctx context.Context, arg RemoveBookAuthorParams) error {
	_, err := q.db.Exec(ctx, removeBookAuthor, arg.BookID, arg.AuthorID)
	return err
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE authors
SET 
  name = $2,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, created_at, updated_at
`

type UpdateAuthorParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, updateAuthor, arg.ID, arg.Name)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
