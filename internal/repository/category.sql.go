// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: category.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addBookCategory = `-- name: AddBookCategory :exec
INSERT INTO book_categories (
  book_id, category_id
) VALUES (
  $1, $2
)
`

type AddBookCategoryParams struct {
	BookID     uuid.UUID `json:"book_id"`
	CategoryID uuid.UUID `json:"category_id"`
}

func (q *Queries) AddBookCategory(ctx context.Context, arg AddBookCategoryParams) error {
	_, err := q.db.Exec(ctx, addBookCategory, arg.BookID, arg.CategoryID)
	return err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, created_at, updated_at FROM categories
WHERE id = $1
`

func (q *Queries) GetCategory(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoryByName = `-- name: GetCategoryByName :one
SELECT id, name, created_at, updated_at FROM categories
WHERE name = $1
`

func (q *Queries) GetCategoryByName(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByName, name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, created_at, updated_at FROM categories
ORDER BY name
LIMIT $1 OFFSET $2
`

type ListCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategoriesByBookID = `-- name: ListCategoriesByBookID :many
SELECT c.id, c.name, c.created_at, c.updated_at FROM categories c
JOIN book_categories bc ON c.id = bc.category_id
WHERE bc.book_id = $1
ORDER BY c.name
`

func (q *Queries) ListCategoriesByBookID(ctx context.Context, bookID uuid.UUID) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategoriesByBookID, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllBookCategories = `-- name: RemoveAllBookCategories :exec
DELETE FROM book_categories
WHERE book_id = $1
`

func (q *Queries) RemoveAllBookCategories(ctx context.Context, bookID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeAllBookCategories, bookID)
	return err
}

const removeBookCategory = `-- name: RemoveBookCategory :exec
DELETE FROM book_categories
WHERE book_id = $1 AND category_id = $2
`

type RemoveBookCategoryParams struct {
	BookID     uuid.UUID `json:"book_id"`
	CategoryID uuid.UUID `json:"category_id"`
}

func (q *Queries) RemoveBookCategory(ctx context.Context, arg RemoveBookCategoryParams) error {
	_, err := q.db.Exec(ctx, removeBookCategory, arg.BookID, arg.CategoryID)
	return err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET 
  name = $2,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, created_at, updated_at
`

type UpdateCategoryParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.ID, arg.Name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
