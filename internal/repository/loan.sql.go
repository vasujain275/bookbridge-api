// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: loan.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createLoan = `-- name: CreateLoan :one
INSERT INTO loans (
  user_id, book_id, borrowed_date, due_date, status
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, book_id, borrowed_date, due_date, returned_date, status, created_at, updated_at
`

type CreateLoanParams struct {
	UserID       uuid.UUID   `json:"user_id"`
	BookID       uuid.UUID   `json:"book_id"`
	BorrowedDate pgtype.Date `json:"borrowed_date"`
	DueDate      pgtype.Date `json:"due_date"`
	Status       string      `json:"status"`
}

func (q *Queries) CreateLoan(ctx context.Context, arg CreateLoanParams) (Loan, error) {
	row := q.db.QueryRow(ctx, createLoan,
		arg.UserID,
		arg.BookID,
		arg.BorrowedDate,
		arg.DueDate,
		arg.Status,
	)
	var i Loan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.BorrowedDate,
		&i.DueDate,
		&i.ReturnedDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLoan = `-- name: DeleteLoan :exec
DELETE FROM loans
WHERE id = $1
`

func (q *Queries) DeleteLoan(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLoan, id)
	return err
}

const getLoan = `-- name: GetLoan :one
SELECT id, user_id, book_id, borrowed_date, due_date, returned_date, status, created_at, updated_at FROM loans
WHERE id = $1
`

func (q *Queries) GetLoan(ctx context.Context, id uuid.UUID) (Loan, error) {
	row := q.db.QueryRow(ctx, getLoan, id)
	var i Loan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.BorrowedDate,
		&i.DueDate,
		&i.ReturnedDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActiveLoans = `-- name: ListActiveLoans :many
SELECT id, user_id, book_id, borrowed_date, due_date, returned_date, status, created_at, updated_at FROM loans
WHERE status = 'active'
ORDER BY due_date
LIMIT $1 OFFSET $2
`

type ListActiveLoansParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListActiveLoans(ctx context.Context, arg ListActiveLoansParams) ([]Loan, error) {
	rows, err := q.db.Query(ctx, listActiveLoans, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Loan
	for rows.Next() {
		var i Loan
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BookID,
			&i.BorrowedDate,
			&i.DueDate,
			&i.ReturnedDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLoans = `-- name: ListLoans :many
SELECT id, user_id, book_id, borrowed_date, due_date, returned_date, status, created_at, updated_at FROM loans
ORDER BY borrowed_date DESC
LIMIT $1 OFFSET $2
`

type ListLoansParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLoans(ctx context.Context, arg ListLoansParams) ([]Loan, error) {
	rows, err := q.db.Query(ctx, listLoans, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Loan
	for rows.Next() {
		var i Loan
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BookID,
			&i.BorrowedDate,
			&i.DueDate,
			&i.ReturnedDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLoansByBookID = `-- name: ListLoansByBookID :many
SELECT id, user_id, book_id, borrowed_date, due_date, returned_date, status, created_at, updated_at FROM loans
WHERE book_id = $1
ORDER BY borrowed_date DESC
LIMIT $2 OFFSET $3
`

type ListLoansByBookIDParams struct {
	BookID uuid.UUID `json:"book_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListLoansByBookID(ctx context.Context, arg ListLoansByBookIDParams) ([]Loan, error) {
	rows, err := q.db.Query(ctx, listLoansByBookID, arg.BookID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Loan
	for rows.Next() {
		var i Loan
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BookID,
			&i.BorrowedDate,
			&i.DueDate,
			&i.ReturnedDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLoansByUserID = `-- name: ListLoansByUserID :many
SELECT id, user_id, book_id, borrowed_date, due_date, returned_date, status, created_at, updated_at FROM loans
WHERE user_id = $1
ORDER BY borrowed_date DESC
LIMIT $2 OFFSET $3
`

type ListLoansByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListLoansByUserID(ctx context.Context, arg ListLoansByUserIDParams) ([]Loan, error) {
	rows, err := q.db.Query(ctx, listLoansByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Loan
	for rows.Next() {
		var i Loan
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BookID,
			&i.BorrowedDate,
			&i.DueDate,
			&i.ReturnedDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOverdueLoans = `-- name: ListOverdueLoans :many
SELECT id, user_id, book_id, borrowed_date, due_date, returned_date, status, created_at, updated_at FROM loans
WHERE status = 'overdue'
ORDER BY due_date
LIMIT $1 OFFSET $2
`

type ListOverdueLoansParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOverdueLoans(ctx context.Context, arg ListOverdueLoansParams) ([]Loan, error) {
	rows, err := q.db.Query(ctx, listOverdueLoans, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Loan
	for rows.Next() {
		var i Loan
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BookID,
			&i.BorrowedDate,
			&i.DueDate,
			&i.ReturnedDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLoan = `-- name: UpdateLoan :one
UPDATE loans
SET 
  user_id = $2,
  book_id = $3,
  borrowed_date = $4,
  due_date = $5,
  returned_date = $6,
  status = $7,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, book_id, borrowed_date, due_date, returned_date, status, created_at, updated_at
`

type UpdateLoanParams struct {
	ID           uuid.UUID   `json:"id"`
	UserID       uuid.UUID   `json:"user_id"`
	BookID       uuid.UUID   `json:"book_id"`
	BorrowedDate pgtype.Date `json:"borrowed_date"`
	DueDate      pgtype.Date `json:"due_date"`
	ReturnedDate pgtype.Date `json:"returned_date"`
	Status       string      `json:"status"`
}

func (q *Queries) UpdateLoan(ctx context.Context, arg UpdateLoanParams) (Loan, error) {
	row := q.db.QueryRow(ctx, updateLoan,
		arg.ID,
		arg.UserID,
		arg.BookID,
		arg.BorrowedDate,
		arg.DueDate,
		arg.ReturnedDate,
		arg.Status,
	)
	var i Loan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.BorrowedDate,
		&i.DueDate,
		&i.ReturnedDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLoanStatus = `-- name: UpdateLoanStatus :one
UPDATE loans
SET 
  status = $2,
  returned_date = $3,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, book_id, borrowed_date, due_date, returned_date, status, created_at, updated_at
`

type UpdateLoanStatusParams struct {
	ID           uuid.UUID   `json:"id"`
	Status       string      `json:"status"`
	ReturnedDate pgtype.Date `json:"returned_date"`
}

func (q *Queries) UpdateLoanStatus(ctx context.Context, arg UpdateLoanStatusParams) (Loan, error) {
	row := q.db.QueryRow(ctx, updateLoanStatus, arg.ID, arg.Status, arg.ReturnedDate)
	var i Loan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.BorrowedDate,
		&i.DueDate,
		&i.ReturnedDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
