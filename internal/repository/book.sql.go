// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: book.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
  isbn_10, isbn_13, title, publisher,
  published_date, description, page_count, language,
  thumbnail_url, total_copies, available_copies
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, isbn_10, isbn_13, title, publisher, published_date, description, page_count, language, thumbnail_url, total_copies, available_copies, created_at, updated_at
`

type CreateBookParams struct {
	Isbn10          pgtype.Text `json:"isbn_10"`
	Isbn13          string      `json:"isbn_13"`
	Title           string      `json:"title"`
	Publisher       pgtype.Text `json:"publisher"`
	PublishedDate   pgtype.Text `json:"published_date"`
	Description     pgtype.Text `json:"description"`
	PageCount       pgtype.Int4 `json:"page_count"`
	Language        pgtype.Text `json:"language"`
	ThumbnailUrl    pgtype.Text `json:"thumbnail_url"`
	TotalCopies     int32       `json:"total_copies"`
	AvailableCopies int32       `json:"available_copies"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook,
		arg.Isbn10,
		arg.Isbn13,
		arg.Title,
		arg.Publisher,
		arg.PublishedDate,
		arg.Description,
		arg.PageCount,
		arg.Language,
		arg.ThumbnailUrl,
		arg.TotalCopies,
		arg.AvailableCopies,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Isbn10,
		&i.Isbn13,
		&i.Title,
		&i.Publisher,
		&i.PublishedDate,
		&i.Description,
		&i.PageCount,
		&i.Language,
		&i.ThumbnailUrl,
		&i.TotalCopies,
		&i.AvailableCopies,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, isbn_10, isbn_13, title, publisher, published_date, description, page_count, language, thumbnail_url, total_copies, available_copies, created_at, updated_at FROM books
WHERE id = $1
`

func (q *Queries) GetBook(ctx context.Context, id uuid.UUID) (Book, error) {
	row := q.db.QueryRow(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Isbn10,
		&i.Isbn13,
		&i.Title,
		&i.Publisher,
		&i.PublishedDate,
		&i.Description,
		&i.PageCount,
		&i.Language,
		&i.ThumbnailUrl,
		&i.TotalCopies,
		&i.AvailableCopies,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBookByISBN = `-- name: GetBookByISBN :one
SELECT id, isbn_10, isbn_13, title, publisher, published_date, description, page_count, language, thumbnail_url, total_copies, available_copies, created_at, updated_at FROM books
WHERE isbn_13 = $1
`

func (q *Queries) GetBookByISBN(ctx context.Context, isbn13 string) (Book, error) {
	row := q.db.QueryRow(ctx, getBookByISBN, isbn13)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Isbn10,
		&i.Isbn13,
		&i.Title,
		&i.Publisher,
		&i.PublishedDate,
		&i.Description,
		&i.PageCount,
		&i.Language,
		&i.ThumbnailUrl,
		&i.TotalCopies,
		&i.AvailableCopies,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, isbn_10, isbn_13, title, publisher, published_date, description, page_count, language, thumbnail_url, total_copies, available_copies, created_at, updated_at FROM books
ORDER BY title
LIMIT $1 OFFSET $2
`

type ListBooksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBooks(ctx context.Context, arg ListBooksParams) ([]Book, error) {
	rows, err := q.db.Query(ctx, listBooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Isbn10,
			&i.Isbn13,
			&i.Title,
			&i.Publisher,
			&i.PublishedDate,
			&i.Description,
			&i.PageCount,
			&i.Language,
			&i.ThumbnailUrl,
			&i.TotalCopies,
			&i.AvailableCopies,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchBooks = `-- name: SearchBooks :many
SELECT id, isbn_10, isbn_13, title, publisher, published_date, description, page_count, language, thumbnail_url, total_copies, available_copies, created_at, updated_at FROM books
WHERE 
  title ILIKE '%' || $1 || '%'
  OR publisher ILIKE '%' || $1 || '%'
  OR description ILIKE '%' || $1 || '%'
ORDER BY title
LIMIT $2 OFFSET $3
`

type SearchBooksParams struct {
	Column1 pgtype.Text `json:"column_1"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

func (q *Queries) SearchBooks(ctx context.Context, arg SearchBooksParams) ([]Book, error) {
	rows, err := q.db.Query(ctx, searchBooks, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Isbn10,
			&i.Isbn13,
			&i.Title,
			&i.Publisher,
			&i.PublishedDate,
			&i.Description,
			&i.PageCount,
			&i.Language,
			&i.ThumbnailUrl,
			&i.TotalCopies,
			&i.AvailableCopies,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET 
  isbn_10 = $2,
  isbn_13 = $3,
  title = $4,
  publisher = $5,
  published_date = $6,
  description = $7,
  page_count = $8,
  language = $9,
  thumbnail_url = $10,
  total_copies = $11,
  available_copies = $12,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, isbn_10, isbn_13, title, publisher, published_date, description, page_count, language, thumbnail_url, total_copies, available_copies, created_at, updated_at
`

type UpdateBookParams struct {
	ID              uuid.UUID   `json:"id"`
	Isbn10          pgtype.Text `json:"isbn_10"`
	Isbn13          string      `json:"isbn_13"`
	Title           string      `json:"title"`
	Publisher       pgtype.Text `json:"publisher"`
	PublishedDate   pgtype.Text `json:"published_date"`
	Description     pgtype.Text `json:"description"`
	PageCount       pgtype.Int4 `json:"page_count"`
	Language        pgtype.Text `json:"language"`
	ThumbnailUrl    pgtype.Text `json:"thumbnail_url"`
	TotalCopies     int32       `json:"total_copies"`
	AvailableCopies int32       `json:"available_copies"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, updateBook,
		arg.ID,
		arg.Isbn10,
		arg.Isbn13,
		arg.Title,
		arg.Publisher,
		arg.PublishedDate,
		arg.Description,
		arg.PageCount,
		arg.Language,
		arg.ThumbnailUrl,
		arg.TotalCopies,
		arg.AvailableCopies,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Isbn10,
		&i.Isbn13,
		&i.Title,
		&i.Publisher,
		&i.PublishedDate,
		&i.Description,
		&i.PageCount,
		&i.Language,
		&i.ThumbnailUrl,
		&i.TotalCopies,
		&i.AvailableCopies,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBookCopies = `-- name: UpdateBookCopies :one
UPDATE books
SET 
  total_copies = $2,
  available_copies = $3,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, isbn_10, isbn_13, title, publisher, published_date, description, page_count, language, thumbnail_url, total_copies, available_copies, created_at, updated_at
`

type UpdateBookCopiesParams struct {
	ID              uuid.UUID `json:"id"`
	TotalCopies     int32     `json:"total_copies"`
	AvailableCopies int32     `json:"available_copies"`
}

func (q *Queries) UpdateBookCopies(ctx context.Context, arg UpdateBookCopiesParams) (Book, error) {
	row := q.db.QueryRow(ctx, updateBookCopies, arg.ID, arg.TotalCopies, arg.AvailableCopies)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Isbn10,
		&i.Isbn13,
		&i.Title,
		&i.Publisher,
		&i.PublishedDate,
		&i.Description,
		&i.PageCount,
		&i.Language,
		&i.ThumbnailUrl,
		&i.TotalCopies,
		&i.AvailableCopies,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
